version: '3.7'
services:
#  traefik:
#    image: traefik:latest # The official Traefik docker image
#    container_name: traefik
#    command: --docker --api --docker.watch --docker.domain=localhost --logLevel=DEBUG  --docker.exposedbydefault=false  #10/12/18 --docker.endpoint=tcp://socat:2375 # Enables the web UI and tells Træfik to listen to docker, without exposing by default
#    networks:
#    - pet_host
#    ports:
#    - "80:80"     # The HTTP port
#    - "8080:8080" # The Web UI (enabled by --api)
#    volumes:
#    - /var/run/docker.sock:/var/run/docker.sock # So that Traefik can listen to the Docker events
#    - /root/traefik.toml:/traefik.toml
#    - /root/acme.json:/acme.json

  # controlador dos containers
  portainer:
    image: portainer/portainer:latest
    container_name: portainer
    ports:
    - '9000:9000'
    networks: 
    - pet_host
    labels:
    - "traefik.enable=false"
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - portainerdata:/data

 # teste com novo banco de dados 
  mongo:
    image: mongo:latest
    container_name: mongo
    command: --smallfiles
    volumes:
      - pet-db:/usr/src/files
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: pass
    networks:
      - pet_host
    environment:
      - MONGODB_URI=mongodb://localhost:27017/pet-porta

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-board
    restart: always
    ports:
      - '8081:8080'
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: pass
    networks:
      - pet_host
    depends_on:
      - mongo
 
  # microserviço que oferece o front-end e solicita/envia requisições/respostas ao cliente
  pet_porta:
    build: "./pet_porta/"
    container_name: pet_porta
    #depends_on:
    #- pet_gateway
    volumes:
    - ./pet_porta/src:/usr/src/pet_porta/src
    ports:
    - "3001:3000"
  #  labels:
  #  - "traefik.enabled=true"
  #  - "traefik.frontend.rule=Host:pet_porta.localhost" 
  #  - "traefik.docker.network=pet_host"
    networks:
    - pet_host
    entrypoint:
    - /usr/local/bin/docker-entrypoint.sh
    depends_on:
    - mongo-express
    - mongo
  # - pet_gateway
  # - traefik

  # microserviço para ativar o arduino
  # pet_arduino:
  #  build: "./pet_arduino/"
  #  container_name: pet_arduino
  #  ports:
  #    - 3002:3000
  #  expose:
  #    - 3002
  #  entrypoint:
  #    - /usr/local/bin/docker-entrypoint.sh
  #  networks:
  #    - pet_host
  #  labels:
  #    - "traefik.enable=true"
  #    - "traefik.docker.network=pet_host"
  #  depends_on:
  #    #- mysql
  #    - traefik

  # serviço para controlar as requisiçoes entre o banco de dados e pet_gateway
  #socat:
  #  image: alpine/socat
  #  container_name: socat
  #  command: tcp-listen:2375,fork,reuseaddr unix-connect:/var/run/docker.sock
  #  volumes:
  #  - /var/run/docker.sock:/var/run/docker.sock
  #  networks:
  #   - pet_host
  #  depends_on:
  #  - traefik

  # microservico para controle de todas as requisições (API - Application Process Interface)
  # pet_gateway:
  #  build: "./pet_gateway/"
  #  container_name: pet_gateway
  #  command: -t -i --device=/dev/bus/usb/003/017 ubuntu bash
  #  environment:
  #  - API_HOST=${API_HOST}
  #  - API_SERVER_PORT=${API_SERVER_PORT}
  #  ports:
  #  - "3000:3000"
  #  expose:
  #  - 3000
  #  networks:
  #  - pet_host
  #  volumes:
  #  - ./server/src:/usr/src/pet_gateway/src
  # entrypoint:
  #  - /usr/local/bin/docker-entrypoint.sh
  #  labels:
  #  - "traefik.enable=true"
  #  - "traefik.backend.rule=Host:localhost"
  #  - "traefik.docker.network=pet_host"
  #  depends_on:
  #  - pet_arduino
  #  - pet_database
  #  - mysql
  #  - traefik

networks:
  pet_host:
    external: true
volumes:
  portainerdata:
  pet-db: