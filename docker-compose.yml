version: '3.7'
services:
#  traefik:
#    image: traefik:latest # The official Traefik docker image
#    container_name: traefik
#    command: --docker --api --docker.watch --docker.domain=localhost --logLevel=DEBUG  --docker.exposedbydefault=false  #10/12/18 --docker.endpoint=tcp://socat:2375 # Enables the web UI and tells Træfik to listen to docker, without exposing by default
#    networks:
#    - pet_host
#    ports:
#    - "80:80"     # The HTTP port
#    - "8080:8080" # The Web UI (enabled by --api)
#    volumes:
#    - /var/run/docker.sock:/var/run/docker.sock # So that Traefik can listen to the Docker events
#    - /root/traefik.toml:/traefik.toml
#    - /root/acme.json:/acme.json


# microservice docker nginx amplify
#  nginx-amplify:
#    build: "./docker-nginx-amplify/"
#    container_name: nginx-board
#    restart: always
#    networks: 
#      - backend

# microservico para controle de todas as requisições (API - Application Process Interface)
#  nginx:
#    image: nginx:alpine
#    container_name: API
#    restart: unless-stopped
#    tty: true
#    ports:
#      - "80:80"
#      - "443:443"
#    networks:
#      - backend
#    volumes:
#      - ./:/usr/src/pet_porta/src
#      - ./nginx.conf:/etc/nginx/nginx.conf

  # controlador dos containers
  portainer:
    image: portainer/portainer:latest
    container_name: portainer
    ports:
    - '9000:9000'
    networks: 
    - backend
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - portainerdata:/data

 # teste com novo banco de dados 
  mongo:
    image: mongo:latest
    container_name: mongo
    command: --smallfiles
    volumes:
      - pet-db:/usr/src/files
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: pass
    networks:
      - backend
    environment:
      - MONGODB_URI=mongodb://localhost:27017/pet-database

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-board
    restart: always
    ports:
      - '8081:8080'
    networks:
      - backend
    depends_on:
      - mongo

  # microserviço para solicitar o banco de dados
  pet_database:
    build: "./pet_database/"
    container_name: pet_database
    networks:
      - backend
    ports:
      - "3033:3000"
    depends_on:
      - mongo
      - mongo-express

  # microserviço que oferece o front-end e solicita/envia requisições/respostas ao cliente
  pet_porta:
    build: "./pet_porta/"
    container_name: pet_porta
    volumes:
      - ./pet_porta/src:/usr/src/pet_porta/src
    ports:
      - "3020:3000"
    networks:
      - backend
      - frontend
    entrypoint:
      - /usr/local/bin/docker-entrypoint.sh
    depends_on:
      - pet_arduino
      - pet_database

  # microserviço para ativar o arduino
  pet_arduino:
    build: "./pet_arduino/"
    container_name: pet_arduino
    ports:
      - "3333:3000"
    command: -t -i --device=/dev/bus/usb/003/017 ubuntu bash
    entrypoint:
      - /usr/local/bin/docker-entrypoint.sh
    networks:
      - backend
    depends_on:
      - portainer

networks:
  backend:
    external: true
  frontend:
    external: true
volumes:
  portainerdata:
  pet-db:
  nginx: