version: "3.7"
services:
  # redis:
  #   image: redis:4.0.5-alpine
  #   command: ["redis-server", "--appendonly", "yes"]
  #   hostname: redis
  #   expose:
  #   - 6379
  #   networks:
  #   - back
  #   volumes:
  #   - redis-data:/data
  # microservice docker nginx amplify

  #  nginx-amplify:
  #    build: "./docker-nginx-amplify/"
  #    container_name: nginx-board
  #    restart: always
  #    networks: 
  #      - backend

  # # microservico para controle de todas as requisições (API - Application Process Interface)
  #   nginx:
  #     image: nginx
  #     container_name: nginx
  #     restart: always
  #     volumes:
  #     - /var/run/docker.sock:/tmp/docker.sock:ro
  #     # - ./:/usr/src/pet_porta/src
  #     # - ./nginx.conf:/etc/nginx/nginx.conf
  #     #- ./usr/src/pet_porta/src:/var/www/html
  #     # - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
  #     - ./conf.d:/etc/nginx
  #     ports:
  #     - "80:80"
  #     - "443:443"
  #     networks:
  #     - back

  # controlador dos containers
  portainer:
    image: portainer/portainer:latest
    restart: always
    container_name: portainer
    ports:
    - "9000:9000"
    networks:
    - front
    - back
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - portainerdata:/data

  # teste com novo banco de dados
  mongo:
    image: mongo:latest
    container_name: mongo
    restart: always
    command: --smallfiles
    volumes:
    - pet:/data
    networks:
    - back

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-board
    restart: always
    ports:
    - "8080:8080"
    networks:
    - back
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: dev
      ME_CONFIG_BASICAUTH_PASSWORD: pass
    depends_on:
    - mongo

  # microserviço para tratar todas as requisiçoes
  pet_gateway:
    build: "./pet_gateway/"
    container_name: pet_gateway
    restart: always
    networks:
      - back
    ports:
      - "3000:3000"
    depends_on:
      - mongo
      - mongo-express

  # microserviço que oferece o front-end e solicita/envia requisições/respostas ao cliente
  pet_porta:
    build: "./pet_porta/"
    container_name: pet_porta
    restart: always
    ports:
      - "3001:3000"
    networks:
      - front
      - back
    entrypoint:
      - /usr/local/bin/docker-entrypoint.sh
    depends_on:
      - pet_gateway

  # microserviço para ativar o arduino
  pet_arduino:
     build: "./pet_arduino/"
     container_name: pet_arduino
     ports:
     - "3300:3000"
     command: -t -i --device=/dev/bus/usb/003/017 ubuntu bash
     entrypoint:
     - /usr/local/bin/docker-entrypoint.sh
     networks:
     - back

networks:
  front:
    driver: bridge
    external: true
    ipam:
       driver: default
       config:
         - subnet: "172.20.10.0/16"

  back:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: "172.27.7.0/16"
  #backend:
volumes:
  portainerdata:
  pet:
  # redis-data:
