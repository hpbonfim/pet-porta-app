version: "3.7"
services:
  # redis:
  #   image: redis:4.0.5-alpine
  #   command: ["redis-server", "--appendonly", "yes"]
  #   hostname: redis
  #   expose:
  #   - 6379
  #   networks:
  #   - back
  #   volumes:
  #   - redis-data:/data

  # controlador dos containers
  portainer:
    image: portainer/portainer:latest
    container_name: portainer
    ports:
      - "9000:9000"
    networks:
      - back
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainerdata:/data

  # teste com novo banco de dados
  mongo:
    image: mongo:latest
    container_name: mongo
    command: --smallfiles
    volumes:
      - pet:/data
    networks:
      - back

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-board
    restart: always
    ports:
      - "8081:8080"
    networks:
      - back
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: dev
      ME_CONFIG_BASICAUTH_PASSWORD: pass
      ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin
    depends_on:
      - mongo

  # microserviço para tratar todas as requisiçoes
  pet_gateway:
    build: "./pet_gateway/"
    container_name: pet_gateway
    networks:
      - back
    ports:
      - "3000:3000"
    depends_on:
      - mongo
      - mongo-express

  # microserviço que oferece o front-end e solicita/envia requisições/respostas ao cliente
  pet_porta:
    build: "./pet_porta/"
    container_name: pet_porta
    volumes:
      - ./pet_porta/src:/usr/src/pet_porta/src
    ports:
      - "3001:3000"
    networks:
      - frontend
      - back
    entrypoint:
      - /usr/local/bin/docker-entrypoint.sh

  # # microserviço para ativar o arduino
  # pet_arduino:
  #   build: "./pet_arduino/"
  #   container_name: pet_arduino
  #   ports:
  #   - "3003:3000"
  #   command: -t -i --device=/dev/bus/usb/003/017 ubuntu bash
  #   entrypoint:
  #   - /usr/local/bin/docker-entrypoint.sh
  #   networks:
  #   - back
  #   depends_on:
  #   - portainer

networks:
  # front:
  #   driver: bridge
  #   ipam:
  #     driver: default
  #     config:
  #       - subnet: "172.20.10.0/16"
  back:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: "172.27.7.0/16"
  #backend:
  #  internal: true
  frontend:
    external: true
volumes:
  portainerdata:
  pet:
  # redis-data:
